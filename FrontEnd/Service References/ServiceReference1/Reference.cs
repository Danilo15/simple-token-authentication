//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontEnd.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TokenData", Namespace="http://schemas.datacontract.org/2004/07/TokenService")]
    [System.SerializableAttribute()]
    public partial class TokenData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITokenService")]
    public interface ITokenService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateToken", ReplyAction="http://tempuri.org/ITokenService/GenerateTokenResponse")]
        FrontEnd.ServiceReference1.TokenData GenerateToken();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/GenerateToken", ReplyAction="http://tempuri.org/ITokenService/GenerateTokenResponse")]
        System.Threading.Tasks.Task<FrontEnd.ServiceReference1.TokenData> GenerateTokenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/ValidateToken", ReplyAction="http://tempuri.org/ITokenService/ValidateTokenResponse")]
        bool ValidateToken(FrontEnd.ServiceReference1.TokenData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/ValidateToken", ReplyAction="http://tempuri.org/ITokenService/ValidateTokenResponse")]
        System.Threading.Tasks.Task<bool> ValidateTokenAsync(FrontEnd.ServiceReference1.TokenData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenServiceChannel : FrontEnd.ServiceReference1.ITokenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenServiceClient : System.ServiceModel.ClientBase<FrontEnd.ServiceReference1.ITokenService>, FrontEnd.ServiceReference1.ITokenService {
        
        public TokenServiceClient() {
        }
        
        public TokenServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FrontEnd.ServiceReference1.TokenData GenerateToken() {
            return base.Channel.GenerateToken();
        }
        
        public System.Threading.Tasks.Task<FrontEnd.ServiceReference1.TokenData> GenerateTokenAsync() {
            return base.Channel.GenerateTokenAsync();
        }
        
        public bool ValidateToken(FrontEnd.ServiceReference1.TokenData data) {
            return base.Channel.ValidateToken(data);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateTokenAsync(FrontEnd.ServiceReference1.TokenData data) {
            return base.Channel.ValidateTokenAsync(data);
        }
    }
}
